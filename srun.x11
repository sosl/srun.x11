#!/bin/bash
# -*- coding: utf-8 -*-
# Author: PÃ¤r Andersson (National Supercomputer Centre, Sweden)
# Version: 0.3 2007-07-30
#
# 2011-06-23: Joerg Bornschein <bornschein@fias.uni-frankfurt.de>
#   Make this script find its own path
# 2018-03-12: Adjusted slightly for OzStar by Stefan Oslowski
#
# This will submit a batch script that starts screen on a node.
# Then ssh is used to connect to the node and attach the screen.
# The result is very similar to an interactive shell in PBS
# (qsub -I)

if [ $# -eq 0 ]
then
  echo usage: $0 [sbatch args]
  echo most common:
  echo -e "\t--ntasks 4 # request 4 cpus"
  echo -e "\t--time=1:2:3 # request 1 hour 2 minutes and 3 seconds of walltime"
  echo -e "\t--gres=gpu:2 # request 2 gpus"
  echo 
  echo At least one argument needs to be specified
  exit
fi

# Find our own path (linux specific)
MYDIR="$( cd "$( dirname "$0" )" && pwd )"

# or
# MYDIR=/usr/local/bin

# Batch Script that starts SCREEN
BS=$MYDIR/_interactive
# Interactive screen script
IS=$MYDIR/_interactive_screen

# Submit the job and get the job id
JOB=`sbatch --output=/dev/null --error=/dev/null $@ $BS 2>&1 \
    | egrep -o -e "\b[0-9]+$"`

# Make sure the job is always canceled
trap "{ /apps/slurm/latest/bin/scancel -Q $JOB; exit; }" SIGINT SIGTERM EXIT

echo "Waiting for JOBID $JOB to start"
while true;do
    sleep 1s

    # Check job status
    STATUS=`squeue -j $JOB -t PD,R -h -o %t`

    if [ "$STATUS" = "R" ];then
        # Job is running, break the while loop
        break
    elif [ "$STATUS" != "PD" ];then
        echo "Job is not Running or Pending. Aborting"
        scancel $JOB
        exit 1
    fi

    echo -n "."

done

# Determine the first node in the job:
NODE=`srun --jobid=$JOB -N1 hostname`

# SSH to the node and attach the screen
sleep 1s
ssh -X -t $NODE $IS slurm$JOB
# The trap will now cancel the job before exiting.

